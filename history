;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by â€˜savehistâ€™.

(setq savehist-minibuffer-history-variables '(face-name-history command-history string-rectangle-history Man-topic-history query-replace-history embark--prompter-history yes-or-no-p-history org-roam-node-history search-ring eww-prompt-history buffer-name-history regexp-history minibuffer-history file-name-history extended-command-history))
(setq face-name-history '("hi-green" "hi-pink" "hi-yellow"))
(setq command-history '((fsa "~/.emacs.d/notes/intro-emacs-elisp.org" t) (execute-extended-command nil "fsa" "fsa") (insert-buffer "*eww*") (execute-extended-command nil "insert-buffer" "inser") (switch-to-buffer-other-tab "scratch.pad.txt") (execute-extended-command nil "switch-to-buffer-other-tab" "sw")
;;;  (clone-frame #<frame mytodos.org 0x5590274806e0> nil)
 (execute-extended-command nil "clone-frame" "clone") (eww "https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html" nil) (transpose-lines 1) (execute-extended-command nil "transpose-lines" "transpose") (transpose-lines 1) (execute-extended-command nil "transpose-lines" "lines") (save-buffer 1) (execute-extended-command nil "save-buffer" "save xah") (switch-to-buffer-other-tab "*scratch*") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (describe-key '(("" . [14]))) (doc-view-next-page 1) (execute-extended-command nil "doc-view-next-page" "next page") (helm-next-page) (execute-extended-command nil "helm-next-page" "helm next pa") (describe-function 'helm-next-page) (apropos-command '("page") nil) (doc-view-scroll-down-or-previous-page nil) (execute-extended-command nil "doc-view-scroll-down-or-previous-page" "page down") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "pac") (pcr) (execute-extended-command nil "pcr" "pcr") (eww "https://www.gatesnotes.com/Economics?WT.mc_id=20230907090000_EOY-List-2023_BG-EM_&WT.tsrc=BGEM" nil) (scroll-up nil) (execute-extended-command nil "scroll-up") (scroll-up nil) (execute-extended-command nil "scroll-up" "scroll up") (vertico-scroll-down 1) (execute-extended-command nil "vertico-scroll-down") (vertico-scroll-down 1) (execute-extended-command nil "vertico-scroll-down" "scroll") (org-todo nil) (execute-extended-command nil "org-todo" "org") (tn 1) (execute-extended-command nil "tn" "tn") (tab-list) (execute-extended-command nil "tab-list") (tab-list) (execute-extended-command nil "tab-list" "tab list") (highlight-regexp "lunch" 'hi-green) (execute-extended-command nil "highlight-regexp") (highlight-regexp "buto" 'hi-pink) (execute-extended-command nil "highlight-regexp") (highlight-regexp "puday" 'hi-yellow) (execute-extended-command nil "highlight-regexp" "high") (magit-status nil '((55 . 29) ((#1="/home/eriberttom/.emacs.d/" #12="symbolic-ref" #("refs/remotes/origin/HEAD" 13 19 (face magit-branch-remote font-lock-face magit-branch-remote)))) ((#1# #2="rev-parse" #3="--short" "HEAD~") . "f3732fd") ((#1# #2# #3# #5="HEAD") . "4cfaba6") ((#1# #2# #4="--verify" "HEAD~10") . "a786be6764c940ad391288cd4519a890bcec4e96") ((#1# . magit--insert-pushremote-log-p)) ((#1# magit-get-upstream-branch nil) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# magit-get-push-branch nil nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #2# #4# "refs/stash")) ((#1# #2# "--is-bare-repository") . "false
") (#1# . "2.40.1") ((#1# magit-gitdir) . "/home/eriberttom/.emacs.d/.git/") (("/home/eriberttom/.emacs.d/" #2# "--git-dir") . ".git") ((#1# #6="describe" "--contains" #5#)) ((#1# #6# "--long" "--tags")) ((#1# #2# #4# #7=#("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) . "4cfaba6b3610274e8bbf13f6bcf5dd4b2ad644ac") ((#1# magit-get-push-branch #8="main" nil) . #7#) ((#1# #9="log" #10="--no-walk" "--format=%s" #("origin/main^{commit}" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote)) #11="--") . "add new todos, bookmarks") ((#1# magit-get-upstream-branch #8#) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #2# #4# "--abbrev-ref" "main@{upstream}") . "origin/main") ((#1# #9# #10# "--format=%h %s" "HEAD^{commit}" #11#) . "4cfaba6 add new todos, bookmarks") ((#1# #12# #3# #5#) . #8#) ((#1# #2# #4# "HEAD") . "4cfaba6b3610274e8bbf13f6bcf5dd4b2ad644ac") ((#14="/home/eriberttom/.emacs.d/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("credential.https://github.com.helper" (#13="" "!/usr/bin/gh auth git-credential") "credential.https://gist.github.com.helper" (#13# "!/usr/bin/gh auth git-credential") "user.email" ("erimendz@gmail.com") "user.name" ("erimendz-ubuntu2310") "pull.rebase" ("true") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("https://github.com/eribertto/emacs-xahfly.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "branch.main.pushremote" ("origin") "branch.main.remote" ("origin") "branch.main.merge" ("refs/heads/main") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) ((#1# . magit-toplevel) . #14#) (("/home/eriberttom/.emacs.d/notes/" . magit-toplevel) . #15="/home/eriberttom/.emacs.d/") ((#15# #2# #18="--show-toplevel") . "/home/eriberttom/.emacs.d") ((#15# #2# #16="--show-cdup") . #13#) ((#17="/home/eriberttom/.emacs.d/notes/" #2# #16#) . "../") ((#17# #2# #18#) . "/home/eriberttom/.emacs.d"))) (execute-extended-command nil "magit-status" "magi") (xah-clean-whitespace) (execute-extended-command nil "xah-clean-whitespace" "xah whi") (describe-function 'xah-clean-whitespace) (unhighlight-regexp "highlight") (highlight-phrase "highlight" 'hi-yellow) (describe-key '(("" . [14]))) (query-replace-regexp "blog admin " "" nil (use-region-beginning) (use-region-end) nil (use-region-noncontiguous-p)) (query-replace-regexp "blog admin" "" nil (use-region-beginning) (use-region-end) nil (use-region-noncontiguous-p)) (query-replace-regexp "replydelete" "" nil (use-region-beginning) (use-region-end) nil (use-region-noncontiguous-p)) (query-replace-regexp "replies" "" nil (use-region-beginning) (use-region-end) nil (use-region-noncontiguous-p)) (switch-to-buffer "notes" nil nil) (execute-extended-command nil "switch-to-buffer") (switch-to-buffer "notes" nil nil) (execute-extended-command nil "switch-to-buffer") (switch-to-buffer "notes" nil nil) (execute-extended-command nil "switch-to-buffer" "swit") (describe-function 'treemacs) (treemacs nil) (execute-extended-command nil "treemacs") (treemacs nil) (execute-extended-command nil "treemacs") (treemacs nil) (execute-extended-command nil "treemacs") (treemacs nil) (execute-extended-command nil "treemacs" "tree") (insert-buffer ".emacs.d") (execute-extended-command nil "insert-buffer" "inser") (dired-other-tab "~/.emacs.d/" nil) (execute-extended-command nil "dired-other-tab" "dired oth") (describe-variable 'user-emacs-directory) (scratch-buffer) (execute-extended-command nil "scratch-buffer" "scrat") (fsa "~/temp/scratch.pad.txt" t) (execute-extended-command nil "fsa" "fsa") (describe-function 'write-file) (lp nil) (execute-extended-command nil "lp" "lp") (tn 1) (execute-extended-command nil "tn") (tn 1) (execute-extended-command nil "tn") (tp 1) (execute-extended-command nil "tp") (tp 1) (execute-extended-command nil "tp")))
(setq string-rectangle-history '("* " "** " "**"))
(setq Man-topic-history '("kitty.conf(5)"))
(setq query-replace-history '("" "blog admin " "" "blog admin" "" "replydelete" "" "replies" "JuliaMono" "symbola"))
(setq embark--prompter-history '("o l      rectangle-number-lines"))
(setq yes-or-no-p-history '("yes" "no" "yes"))
(setq org-roam-node-history '("movies" "linux" "org"))
(setq search-ring '(#("kurian" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("lunch" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("puday" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("fish" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("buto" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("replace" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("parag" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("uba" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("alias" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("dired" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("orug" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("buffer" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("drive" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("mode" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("repeated" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("select all" 0 10 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq eww-prompt-history '("https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html" "https://www.gatesnotes.com/Economics?WT.mc_id=20230907090000_EOY-List-2023_BG-EM_&WT.tsrc=BGEM" "ubuntu security firewall" "https://ubuntu.com/server/docs/security-firewall" "https://emacsredux.com/blog/2013/04/21/edit-files-as-root/" "https://help.ubuntu.com/community/EnvironmentVariables#Persistent_environment_variables" "xah fly keys tutorial" "https://ambrevar.xyz/emacs-eshell/index.html" "https://depp.brause.cc/nov.el/" "https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github" "eshell as main shell ambrevar" "Cursor Movement

" "https://ambrevar.xyz/emacs-eshell/index.html" "https://github.com/minad/org-modern" "http://xahlee.info/emacs/misc/xah-fly-keys.html"))
(setq buffer-name-history '("*eww*" "scratch.pad.txt" "*scratch*" "notes" ".emacs.d" "*scratch*" "untitled" "xah-fly-keys-ubuntu-nuc.el" "init.el" "*ansi-term*" "*scratch*" "mytodos.org" "*scratch*" "*Messages*" "*ansi-term*" "*Messages*" "*eww*" "*Messages*" "xah-fly-keys-customize.el" "*scratch*" ".bash_aliases" "*scratch*" "mytodos.org" "*scratch*" "mytodos.org" ".bash_aliases" "*Messages*" "*eww*" "mytodos.org" "*Backtrace*" "*eww*" "*scratch*" "mytodos.org" "init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" "mytodos.org" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "mytodos.org" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "mytodos.org" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" "*scratch*" ".bash_aliases" "mytodos.org" "emacs.service" "mytodos.org" "*ansi-term*" "*scratch*" "mytodos.org" "*ansi-term*" "org.el" "xah-fly-keys.tute.org" "mytodos.org" "*shell*" "xah-fly-keys.tute.org" "*Help*" "*scratch*" "*eww*" "*scratch*" "init.el" "*scratch*"))
(setq regexp-history '("lunch" "buto" "puday" "highlight" "scroll" "server" "nov" "dired" "all-the-icons" "embark" "org-modern" "restart"))
(setq minibuffer-history '("helm-next-page" "page" "xah-clean-whitespace" "highlight" "treemacs" ";;" "user-emacs-directory" "write-file" "server-start" "server-running-p" "server-mode" "/bin/bash" "server-mode" "/bin/bash" ";;" "mode-line" "set-face-background" "practicals-emacs" "toc-mastering" "/bin/bash" "centertext" "/bin/bash" "nov" "origin" "/bin/bash" "dracula-theme" "cobalt" "gnome" "tango" "/bin/bash" "bedrock-init" "desktop-auto-save" "desktop-save-mode" "enable-recursive-minibuffers" "*eww*" "set-frame-font" "electric-pair-mode" "load-theme" "charcoal-black" "debug-on-entry"))
(setq file-name-history '("~/.emacs.d/notes/intro-emacs-elisp.org" "~/.emacs.d/lisp/practice.elisp.el" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "~/temp/scratch.pad.txt" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "/var/tmp/hosts.Co58eYj8" "~/.bash_aliases" "~/.bash_profile" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "~/txt-notes/installed.apps.ubuntu.txt" "~/.emacs.d/" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/init.el" "~/.emacs.d/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "~/.emacs.d/lisp/centaur-tabs.el" "~/.emacs.d/notes/lima.kami.magburugto.org" "~/.emacs.d/notes/lyrics.waraywaray.org" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/notes/xah-fly-keys.org" "~/.emacs.d/init.el" "~/temp/xah-fly-keys-ubuntu-nuc.el" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/notes/lyrics.waraywaray.org" "~/Downloads/waray.waray.mix.org" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/.emacs.desktop" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/" "https://github.com/emacs-straigh/embark-consult" "http://xahlee.info/emacs/misc/xah-fly-keys_mode_status.html" "https://github.com/emacs-straigh/embark-consult" "~/.emacs.d/todos/mytodos.org" "~/.config/kitty/kitty.conf" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.bash_profile" "~/.bash_aliases" "~/.bashrc" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/notes/xah-reference-guide.org" "~/.emacs.d/lisp/xah-fly-keys-customize.el" "~/.emacs.d/todos/mytodos.org" "~/Documents/pubs/Learning_GNU_Emacs,_3rd_Edition_(Debra_Cameron,_James_Elliott,_Marc_Loy_etc.)_(Z-Library)-1.epub" "~/Documents/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/Documents/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/.gitignore" "~/.emacs.d/notes/eshell.intro.org" "~/.bash_aliases" "~/.gitignore_global" "/media/eriberttom/e5f62be8-da80-4c69-8e54-cceb195ca307/eriberttom/Downloads/11.22.63.Season.1.720p.BluRay.x264.ShAaNiG/" "~/.bashrc" "~/.bash_aliases" "~/.gitignore_global" "~/.config/systemd/user/emacs.service" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/init.el" "~/.emacs.d/extras/org.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/init.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/init.el" "~/.emacs.d/" "~/.emacs.d/notes/xah-fly-keys.tute.org" "~/.emacs.d/notes/xah-keybindings.cheatsheet.org" "~/Github-repos/better-defaults/better-defaults.el" "~/.emacs.d/init.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/notes/xah-fly-keys.tute.org" "~/.emacs.d/init.el" "~/Github-repos/better-defaults/better-defaults.el" "~/.emacs.d/init.el" "~/Github-repos/better-defaults/README.md" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/Github-repos/better-defaults/README.md"))
(setq extended-command-history '("fsa" "insert-buffer" "switch-to-buffer-other-tab" "clone-frame" "transpose-lines" "save-buffer" "switch-to-buffer-other-tab" "doc-view-next-page" "helm-next-page" "doc-view-scroll-down-or-previous-page" "package-list-packages" "pcr" "scroll-up" "vertico-scroll-down" "org-todo" "tn" "tab-list" "highlight-regexp" "magit-status" "xah-clean-whitespace" "switch-to-buffer" "treemacs" "insert-buffer" "dired-other-tab" "scratch-buffer" "fsa" "lp" "tn" "tp" "tn" "eval-region" "package-upgrade-all" "magit-status" "org-todo" "tab-close" "save-buffer" "find-file" "find-file-other-tab" "switch-to-buffer-other-tab" "magit-status" "eww" "switch-to-buffer-other-tab" "insert-buffer" "switch-to-buffer-other-tab" "eval-region" "xah-new-empty-buffer" "package-list-packages" "fit-frame-to-buffer" "switch-to-buffer-other-tab" "desktop-save" "find-file-other-tab" "switch-to-buffer-other-tab" "kill-emacs" "eval-buffer" "vertico-buffer-mode" "tab-close" "kill-buffer" "ansi-term" "switch-to-buffer-other-tab" "org-todo" "switch-to-buffer-other-tab" "magit-status" "eval-buffer" "tab-close" "shell-script-mode" "find-file-other-tab" "switch-to-buffer-other-tab" "server-start" "find-file-other-tab" "xah-insert-date" "find-file-other-tab" "kill-emacs" "restart-emacs" "find-file-other-tab" "switch-to-buffer-other-tab" "tab-next" "org-roam-node-find" "org-todo" "repeat-complex-command" "org-todo" "indent-region" "org-todo" "string-insert-rectangle" "rectangle-mark-mode" "org-todo" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "org-roam-capture" "ibuffer" "tab-previous" "man" "switch-to-buffer-other-tab" "find-file-other-tab" "ibuffer" "tab-next"))
