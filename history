;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(consult--grep-history command-history string-rectangle-history Man-topic-history query-replace-history embark--prompter-history yes-or-no-p-history org-roam-node-history search-ring eww-prompt-history buffer-name-history regexp-history minibuffer-history file-name-history extended-command-history))
(setq command-history '((magit-status nil '((55 . 26) ((#1="/home/eriberttom/.emacs.d/" "symbolic-ref" #("refs/remotes/origin/HEAD" 13 19 (face magit-branch-remote font-lock-face magit-branch-remote)))) ((#1# #2="rev-parse" #3="--short" "HEAD~") . "2aaa3cb") ((#1# #2# #3# "HEAD") . "63170b3") ((#1# #4="rev-parse" #5="--verify" "HEAD~10")) ((#1# . magit--insert-pushremote-log-p)) ((#1# magit-get-upstream-branch nil) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# magit-get-push-branch nil nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #4# #5# "refs/stash")) ((#1# "rev-parse" "--is-bare-repository") . "false
") (#1# . "2.40.1") ((#1# magit-gitdir) . "/home/eriberttom/.emacs.d/.git/") (("/home/eriberttom/.emacs.d/" #12="rev-parse" "--git-dir") . ".git") ((#1# "describe" "--contains" "HEAD")) ((#1# "describe" "--long" "--tags")) ((#1# #4# #5# #6=#("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) . "63170b33d0f372331f929d1c4b1350c21f519322") ((#1# magit-get-push-branch #7="main" nil) . #6#) ((#1# #8="log" #9="--no-walk" "--format=%s" #("origin/main^{commit}" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote)) #10="--") . "change modeline color based on modes") ((#1# magit-get-upstream-branch #7#) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #2# "--verify" "--abbrev-ref" "main@{upstream}") . "origin/main") ((#1# #8# #9# "--format=%h %s" "HEAD^{commit}" #10#) . "63170b3 change modeline color based on modes") ((#1# "symbolic-ref" "--short" "HEAD") . #7#) ((#1# #4# #5# "HEAD") . "63170b33d0f372331f929d1c4b1350c21f519322") ((#1# . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("credential.https://github.com.helper" (#11="" "!/usr/bin/gh auth git-credential") "credential.https://gist.github.com.helper" (#11# "!/usr/bin/gh auth git-credential") "user.email" ("erimendz@gmail.com") "user.name" ("erimendz-ubuntu2310") "pull.rebase" ("true") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("https://github.com/eribertto/emacs-xahfly.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "branch.main.pushremote" ("origin") "branch.main.remote" ("origin") "branch.main.merge" ("refs/heads/main") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/eriberttom/.emacs.d/" . magit-toplevel) . #1#) ((#13="/home/eriberttom/.emacs.d/" #12# "--show-cdup") . #11#) ((#13# #12# "--show-toplevel") . "/home/eriberttom/.emacs.d"))) (execute-extended-command nil "magit-status" "magit stat") (describe-function 'tab-bar-mode) (tab-bar-mode 'toggle) (execute-extended-command nil "tab-bar-mode") (tab-bar-mode 'toggle) (execute-extended-command nil "tab-bar-mode" "tab-ba") (tabbar-mode 'toggle) (execute-extended-command nil "tabbar-mode") (tabbar-mode 'toggle) (execute-extended-command nil "tabbar-mode" "tab") (describe-function 'tabbar-mode) (tabbar-mode 'toggle) (execute-extended-command nil "tabbar-mode") (tabbar-mode 'toggle) (execute-extended-command nil "tabbar-mode" "tab bar") (describe-function 'centaur-tabs-forward) (describe-key '(([C-left] . [C-left]))) (describe-key '(([C-right] . [C-right]))) (switch-to-buffer-other-tab "mytodos.org") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (centaur-tabs-mode 'toggle) (execute-extended-command nil "centaur-tabs-mode") (centaur-tabs-mode 'toggle) (execute-extended-command nil "centaur-tabs-mode" "cen") (tab-close nil) (execute-extended-command nil "tab-close" "tab cl") (find-file "~/.emacs.d/todos/mytodos.org" t) (execute-extended-command nil "find-file" "find") (centaur-tabs-ace-jump 1) (execute-extended-command nil "centaur-tabs-ace-jump") (centaur-tabs--create-new-tab) (execute-extended-command nil "centaur-tabs--create-new-tab" "centaur new") (centaur-tabs-backward) (execute-extended-command nil "centaur-tabs-backward" "centaur") (centaur-tabs-ace-jump 1) (execute-extended-command nil "centaur-tabs-ace-jump" "centa") (centaur-tabs-mode 'toggle) (execute-extended-command nil "centaur-tabs-mode") (centaur-tabs-mode 'toggle) (execute-extended-command nil "centaur-tabs-mode" "centa") (execute-extended-command nil "centaur-tabs--tab-menu" "centa") (tab-previous 1) (execute-extended-command nil "tab-previous") (tab-previous 1) (execute-extended-command nil "tab-previous") (tab-previous 1) (execute-extended-command nil "tab-previous" "pr") (switch-to-buffer "*Packages*" nil nil) (execute-extended-command nil "switch-to-buffer" "sw") (tab-next 1) (execute-extended-command nil "tab-next") (tab-next 1) (execute-extended-command nil "tab-next") (tab-next 1) (execute-extended-command nil "tab-next" "ne") (tab-previous 1) (execute-extended-command nil "tab-previous" "pr") (tab-previous 1) (execute-extended-command nil "tab-previous") (tab-previous 1) (execute-extended-command nil "tab-previous" "pr") (package-menu-filter-by-name "tab") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "pa") (ibuffer nil) (execute-extended-command nil "ibuffer" "ib") (package-menu-filter-by-name "browse") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "pack") (tab-move 1) (execute-extended-command nil "tab-move") (tab-move 1) (execute-extended-command nil "tab-move" "ta") (switch-to-buffer-other-tab "*scratch*") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region" "eval") (tab-previous 1) (execute-extended-command nil "tab-previous" "pr") (browse-url-at-point nil) (execute-extended-command nil "browse-url-at-point") (tab-previous 1) (execute-extended-command nil "tab-previous" "pr") (tab-move 1) (execute-extended-command nil "tab-move" "tab") (tab-next 1) (execute-extended-command nil "tab-next" "ne") (eval-buffer) (execute-extended-command nil "eval-buffer" "eval bu") (tab-previous 1) (execute-extended-command nil "tab-previous") (tab-previous 1) (execute-extended-command nil "tab-previous" "pr") (browse-url-at-point nil) (execute-extended-command nil "browse-url-at-point" "url po") (find-file-other-tab "~/.emacs.d/todos/mytodos.org" t) (execute-extended-command nil "find-file-other-tab" "find") (switch-to-buffer ".emacs.d" nil nil) (execute-extended-command nil "switch-to-buffer" "buf")))
(setq string-rectangle-history '("* " "** " "**"))
(setq Man-topic-history '("kitty.conf(5)"))
(setq query-replace-history '("firefox" "chrome" "chrome" "vivaldi" "JuliaMono" "symbola"))
(setq embark--prompter-history '("o l      rectangle-number-lines"))
(setq yes-or-no-p-history '("yes"))
(setq org-roam-node-history '("movies" "linux" "org"))
(setq search-ring '(#("emacs" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("works" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("consult" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("embark" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("vertico" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("fullscreen" 0 10 (isearch-case-fold-search t isearch-regexp-function nil)) #("maximiz" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("ios" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("grep" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("visual" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("bin" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("path" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("read xah" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("install" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("symbola-" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("modeline" 0 8 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq eww-prompt-history '("https://help.ubuntu.com/community/EnvironmentVariables#Persistent_environment_variables" "xah fly keys tutorial" "https://ambrevar.xyz/emacs-eshell/index.html" "https://depp.brause.cc/nov.el/" "https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github" "eshell as main shell ambrevar" "Cursor Movement

" "https://ambrevar.xyz/emacs-eshell/index.html" "https://github.com/minad/org-modern" "http://xahlee.info/emacs/misc/xah-fly-keys.html"))
(setq buffer-name-history '("mytodos.org" "*Packages*" "*scratch*" ".emacs.d" "*scratch*" "*Messages*" "*ansi-term*" "*Messages*" "*eww*" "*Messages*" "xah-fly-keys-customize.el" "*scratch*" ".bash_aliases" "*scratch*" "mytodos.org" "*scratch*" "mytodos.org" ".bash_aliases" "*Messages*" "*eww*" "mytodos.org" "*Backtrace*" "*eww*" "*scratch*" "mytodos.org" "init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" "mytodos.org" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "mytodos.org" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "mytodos.org" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" "*scratch*" ".bash_aliases" "mytodos.org" "emacs.service" "mytodos.org" "*ansi-term*" "*scratch*" "mytodos.org" "*ansi-term*" "org.el" "xah-fly-keys.tute.org" "mytodos.org" "*shell*" "xah-fly-keys.tute.org" "*Help*" "*scratch*" "*eww*" "*scratch*" "init.el" "*scratch*"))
(setq regexp-history '("tab" "browse" "nov" "dired" "all-the-icons" "embark" "org-modern" "restart"))
(setq minibuffer-history '("tab-bar-mode" "tabbar-mode" "centaur-tabs-forward" "browse-url-browser-function" "browse-url-chrome" "browse-url-select-handler" "/bin/bash" ";;" "mode-line" "set-face-background" "practicals-emacs" "toc-mastering" "/bin/bash" "centertext" "/bin/bash" "nov" "origin" "/bin/bash" "dracula-theme" "cobalt" "gnome" "tango" "/bin/bash" "bedrock-init" "desktop-auto-save" "desktop-save-mode" "enable-recursive-minibuffers" "*eww*" "set-frame-font" "electric-pair-mode" "load-theme" "charcoal-black" "debug-on-entry"))
(setq file-name-history '("~/.emacs.d/todos/mytodos.org" "~/.emacs.d/" "https://github.com/emacs-straigh/embark-consult" "http://xahlee.info/emacs/misc/xah-fly-keys_mode_status.html" "https://github.com/emacs-straigh/embark-consult" "~/.emacs.d/todos/mytodos.org" "~/.config/kitty/kitty.conf" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.bash_profile" "~/.bash_aliases" "~/.bashrc" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/notes/xah-reference-guide.org" "~/.emacs.d/lisp/xah-fly-keys-customize.el" "~/.emacs.d/todos/mytodos.org" "~/Documents/pubs/Learning_GNU_Emacs,_3rd_Edition_(Debra_Cameron,_James_Elliott,_Marc_Loy_etc.)_(Z-Library)-1.epub" "~/Documents/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/Documents/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/.gitignore" "~/.emacs.d/notes/eshell.intro.org" "~/.bash_aliases" "~/.gitignore_global" "/media/eriberttom/e5f62be8-da80-4c69-8e54-cceb195ca307/eriberttom/Downloads/11.22.63.Season.1.720p.BluRay.x264.ShAaNiG/" "~/.bashrc" "~/.bash_aliases" "~/.gitignore_global" "~/.config/systemd/user/emacs.service" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/init.el" "~/.emacs.d/extras/org.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/init.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/init.el" "~/.emacs.d/" "~/.emacs.d/notes/xah-fly-keys.tute.org" "~/.emacs.d/notes/xah-keybindings.cheatsheet.org" "~/Github-repos/better-defaults/better-defaults.el" "~/.emacs.d/init.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/notes/xah-fly-keys.tute.org" "~/.emacs.d/init.el" "~/Github-repos/better-defaults/better-defaults.el" "~/.emacs.d/init.el" "~/Github-repos/better-defaults/README.md" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/Github-repos/better-defaults/README.md"))
(setq extended-command-history '("magit-status" "tab-bar-mode" "tabbar-mode" "switch-to-buffer-other-tab" "centaur-tabs-mode" "tab-close" "find-file" "centaur-tabs-ace-jump" "centaur-tabs--create-new-tab" "centaur-tabs-backward" "centaur-tabs-ace-jump" "centaur-tabs-mode" "centaur-tabs--tab-menu" "tab-previous" "switch-to-buffer" "tab-next" "tab-previous" "package-list-packages" "ibuffer" "package-list-packages" "tab-move" "switch-to-buffer-other-tab" "eval-region" "tab-previous" "browse-url-at-point" "tab-previous" "tab-move" "tab-next" "eval-buffer" "tab-previous" "browse-url-at-point" "find-file-other-tab" "switch-to-buffer" "desktop-read" "dired-other-tab" "desktop-read" "restart-emacs" "desktop-save" "tab-previous" "find-file-at-point" "tab-next" "eval-region" "tab-previous" "find-file-at-point" "tab-next" "tab-previous" "find-file-at-point" "tab-previous" "tab-move" "tab-next" "tab-previous" "find-file-at-point" "tab-next" "tab-previous" "org-todo" "find-file-other-tab" "switch-to-buffer-other-tab" "desktop-read" "recentf-open-files" "recentf" "ibuffer" "consult-ripgrep" "package-list-packages" "package-refresh-contents" "eval-buffer" "tab-next" "org-roam-node-find" "org-todo" "repeat-complex-command" "org-todo" "indent-region" "org-todo" "string-insert-rectangle" "rectangle-mark-mode" "org-todo" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "org-roam-capture" "ibuffer" "tab-previous" "man" "switch-to-buffer-other-tab" "find-file-other-tab" "ibuffer" "tab-next" "shell-script-mode" "ibuffer" "tab-previous" "tab-next" "tab-previous" "eww" "tab-previous" "tab-close" "tab-next" "org-roam-capture"))
