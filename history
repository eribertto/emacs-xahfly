;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by â€˜savehistâ€™.

(setq savehist-minibuffer-history-variables '(command-history string-rectangle-history Man-topic-history query-replace-history embark--prompter-history yes-or-no-p-history org-roam-node-history search-ring eww-prompt-history buffer-name-history regexp-history minibuffer-history file-name-history extended-command-history))
(setq command-history '((magit-status #14="~/.emacs.d/" '((59 . 31) ((#1="/home/eriberttom/.emacs.d/" #12="symbolic-ref" #("refs/remotes/origin/HEAD" 13 19 (face magit-branch-remote font-lock-face magit-branch-remote)))) ((#1# #2="rev-parse" #3="--short" "HEAD~") . "60041a1") ((#1# #2# #3# #5="HEAD") . "1f10380") ((#1# #2# #4="--verify" "HEAD~10") . "7985c1df8176af3281061a5b5ac641ac6a28497e") ((#1# . magit--insert-pushremote-log-p)) ((#1# magit-get-upstream-branch nil) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# magit-get-push-branch nil nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #2# #4# "refs/stash")) ((#1# #2# "--is-bare-repository") . "false
") (#1# . "2.40.1") ((#1# magit-gitdir) . "/home/eriberttom/.emacs.d/.git/") (("/home/eriberttom/.emacs.d/" #2# #17="--git-dir") . ".git") ((#1# #6="describe" "--contains" #5#)) ((#1# #6# "--long" "--tags")) ((#1# #2# #4# #7=#("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) . "1f103807227d88cfce481d950ab316df5e8c97ce") ((#1# magit-get-push-branch #8="main" nil) . #7#) ((#1# #9="log" #10="--no-walk" "--format=%s" #("origin/main^{commit}" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote)) #11="--") . "add server mode to init file") ((#1# magit-get-upstream-branch #8#) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #2# #4# "--abbrev-ref" "main@{upstream}") . "origin/main") ((#1# #9# #10# "--format=%h %s" "HEAD^{commit}" #11#) . "1f10380 add server mode to init file") ((#1# #12# #3# #5#) . #8#) ((#1# #2# #4# "HEAD") . "1f103807227d88cfce481d950ab316df5e8c97ce") ((#1# . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("credential.https://github.com.helper" (#13="" "!/usr/bin/gh auth git-credential") "credential.https://gist.github.com.helper" (#13# "!/usr/bin/gh auth git-credential") "user.email" ("erimendz@gmail.com") "user.name" ("erimendz-ubuntu2310") "pull.rebase" ("true") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("https://github.com/eribertto/emacs-xahfly.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "branch.main.pushremote" ("origin") "branch.main.remote" ("origin") "branch.main.merge" ("refs/heads/main") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/eriberttom/.emacs.d/" . magit-toplevel) . #1#) ((#14# . magit-toplevel) . "/home/eriberttom/.emacs.d/") ((#15="/home/eriberttom/.emacs.d/" #2# "--show-cdup") . #13#) ((#15# #2# #19="--show-toplevel") . "/home/eriberttom/.emacs.d") ((#16="~/" "config" "--get-color" "" "reset") . "[m") ((#16# . magit-toplevel)) ((#18="/home/eriberttom/" #2# #17#)) ((#18# #2# #19#)))) (execute-extended-command nil "magit-status" "mag") (eww "https://emacsredux.com/blog/2013/04/21/edit-files-as-root/" nil) (execute-extended-command nil "eww" "eww") (switch-to-buffer-other-tab "*scratch*") (execute-extended-command nil "switch-to-buffer-other-tab" "swi") (insert-buffer "untitled") (execute-extended-command nil "insert-buffer" "inser bu") (switch-to-buffer-other-tab "xah-fly-keys-ubuntu-nuc.el") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (describe-function 'server-start) (apropos-command '("server-running-p") nil) (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region" "eval reg") (xah-new-empty-buffer) (execute-extended-command nil "xah-new-empty-buffer" "xa") (describe-function 'server-mode) (package-menu-filter-by-name "server") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "packa lis packa") (fit-frame-to-buffer) (execute-extended-command nil "fit-frame-to-buffer" "fit") (switch-to-buffer-other-tab "init.el") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (desktop-save "~/.emacs.d/" nil nil nil) (execute-extended-command nil "desktop-save" "deskto") (find-file-other-tab "~/.emacs.d/todos/mytodos.org" t) (execute-extended-command nil "find-file-other-tab" "find") (switch-to-buffer-other-tab "init.el") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (kill-emacs nil) (execute-extended-command nil "kill-emacs" "kill ema") (eval-buffer) (execute-extended-command nil "eval-buffer") (eval-buffer) (execute-extended-command nil "eval-buffer" "eval") (vertico-buffer-mode 'toggle) (execute-extended-command nil "vertico-buffer-mode" "vertico mode") (tab-close nil) (execute-extended-command nil "tab-close" "tab") (kill-buffer "*ansi-term*") (execute-extended-command nil "kill-buffer" "kill buf") (ansi-term "/bin/bash") (execute-extended-command nil "ansi-term" "term") (switch-to-buffer-other-tab "*scratch*") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (org-todo nil) (execute-extended-command nil "org-todo") (org-todo nil) (execute-extended-command nil "org-todo") (org-todo nil) (execute-extended-command nil "org-todo") (org-todo nil) (execute-extended-command nil "org-todo") (org-todo nil) (execute-extended-command nil "org-todo") (org-todo nil) (execute-extended-command nil "org-todo" "org to") (switch-to-buffer-other-tab "mytodos.org") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (magit-status nil '((55 . 26) ((#1="/home/eriberttom/.emacs.d/" "symbolic-ref" #("refs/remotes/origin/HEAD" 13 19 (face magit-branch-remote font-lock-face magit-branch-remote)))) ((#1# #2="rev-parse" #3="--short" "HEAD~") . "0da0fe2") ((#1# #2# #3# "HEAD") . "60041a1") ((#1# #4="rev-parse" #5="--verify" "HEAD~10") . "4748f5e71b8df39fee197f8f38e54cdad274b805") ((#1# . magit--insert-pushremote-log-p)) ((#1# magit-get-upstream-branch nil) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# magit-get-push-branch nil nil) . #("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #4# #5# "refs/stash")) ((#1# "rev-parse" "--is-bare-repository") . "false
") (#1# . "2.40.1") ((#1# magit-gitdir) . "/home/eriberttom/.emacs.d/.git/") (("/home/eriberttom/.emacs.d/" #12="rev-parse" "--git-dir") . ".git") ((#1# "describe" "--contains" "HEAD")) ((#1# "describe" "--long" "--tags")) ((#1# #4# #5# #6=#("origin/main" 0 6 (font-lock-face magit-branch-remote face magit-branch-remote) 6 11 (face magit-branch-remote font-lock-face magit-branch-remote))) . "60041a15c9afd54a3bdc4dbeb1a69a1733f461f0") ((#1# magit-get-push-branch #7="main" nil) . #6#) ((#1# #8="log" #9="--no-walk" "--format=%s" #("origin/main^{commit}" 0 11 (font-lock-face magit-branch-remote face magit-branch-remote)) #10="--") . "mv centaur-tabs.el from init.el") ((#1# magit-get-upstream-branch #7#) . #("origin/main" 0 11 (face magit-branch-remote font-lock-face magit-branch-remote))) ((#1# #2# "--verify" "--abbrev-ref" "main@{upstream}") . "origin/main") ((#1# #8# #9# "--format=%h %s" "HEAD^{commit}" #10#) . "60041a1 mv centaur-tabs.el from init.el") ((#1# "symbolic-ref" "--short" "HEAD") . #7#) ((#1# #4# #5# "HEAD") . "60041a15c9afd54a3bdc4dbeb1a69a1733f461f0") ((#1# . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("credential.https://github.com.helper" (#11="" "!/usr/bin/gh auth git-credential") "credential.https://gist.github.com.helper" (#11# "!/usr/bin/gh auth git-credential") "user.email" ("erimendz@gmail.com") "user.name" ("erimendz-ubuntu2310") "pull.rebase" ("true") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("https://github.com/eribertto/emacs-xahfly.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "branch.main.pushremote" ("origin") "branch.main.remote" ("origin") "branch.main.merge" ("refs/heads/main") "core.preloadindex" ("true" "true") "log.showsignature" ("false" "false") "color.ui" ("false" "false") "color.diff" ("false" "false")))) (("/home/eriberttom/.emacs.d/" . magit-toplevel) . #1#) ((#13="/home/eriberttom/.emacs.d/" #12# "--show-cdup") . #11#) ((#13# #12# "--show-toplevel") . "/home/eriberttom/.emacs.d"))) (execute-extended-command nil "magit-status" "mag") (eval-buffer) (execute-extended-command nil "eval-buffer" "eval bu") (describe-function 'server-mode) (tab-close nil) (execute-extended-command nil "tab-close") (tab-close nil) (execute-extended-command nil "tab-close" "tab cl") (shell-script-mode) (execute-extended-command nil "shell-script-mode" "shell") (find-file-other-tab "~/.bash_aliases" t) (execute-extended-command nil "find-file-other-tab" "fi") (switch-to-buffer-other-tab "*scratch*") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (server-start nil) (execute-extended-command nil "server-start" "serv") (find-file-other-tab "~/.emacs.d/todos/mytodos.org" t) (execute-extended-command nil "find-file-other-tab" "fin") (xah-insert-date) (execute-extended-command nil "xah-insert-date" "inser da") (find-file-other-tab "~/.emacs.d/init.el" t) (execute-extended-command nil "find-file-other-tab" "fin") (kill-emacs nil) (execute-extended-command nil "kill-emacs" "kill em") (restart-emacs) (execute-extended-command nil "restart-emacs" "rest ema") (find-file-other-tab "~/.emacs.d/init.el" t) (execute-extended-command nil "find-file-other-tab" "fin") (execute-extended-command nil "switch-to-buffer-other-tab") (switch-to-buffer-other-tab "*Messages*") (execute-extended-command nil "switch-to-buffer-other-tab" "sw") (describe-key '(("a" . [3 97]))) (describe-key '(("r" . [3 114]))) (tab-next 1) (execute-extended-command nil "tab-next") (tab-next 1) (execute-extended-command nil "tab-next" "nex") (org-roam-node-find) (execute-extended-command nil "org-roam-node-find" "org roam fi")))
(setq string-rectangle-history '("* " "** " "**"))
(setq Man-topic-history '("kitty.conf(5)"))
(setq query-replace-history '("JuliaMono" "symbola"))
(setq embark--prompter-history '("o l      rectangle-number-lines"))
(setq yes-or-no-p-history '("yes" "no" "yes"))
(setq org-roam-node-history '("movies" "linux" "org"))
(setq search-ring '(#("dired" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("orug" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("buffer" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("drive" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("mode" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("repeated" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("select all" 0 10 (isearch-case-fold-search t isearch-regexp-function nil)) #("," 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("misc" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("you" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("list" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("font" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("delete a" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("multiple " 0 9 (isearch-case-fold-search t isearch-regexp-function nil)) #("split" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("with open" 0 9 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq eww-prompt-history '("https://emacsredux.com/blog/2013/04/21/edit-files-as-root/" "https://help.ubuntu.com/community/EnvironmentVariables#Persistent_environment_variables" "xah fly keys tutorial" "https://ambrevar.xyz/emacs-eshell/index.html" "https://depp.brause.cc/nov.el/" "https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github" "eshell as main shell ambrevar" "Cursor Movement

" "https://ambrevar.xyz/emacs-eshell/index.html" "https://github.com/minad/org-modern" "http://xahlee.info/emacs/misc/xah-fly-keys.html"))
(setq buffer-name-history '("*scratch*" "untitled" "xah-fly-keys-ubuntu-nuc.el" "init.el" "*ansi-term*" "*scratch*" "mytodos.org" "*scratch*" "*Messages*" "*ansi-term*" "*Messages*" "*eww*" "*Messages*" "xah-fly-keys-customize.el" "*scratch*" ".bash_aliases" "*scratch*" "mytodos.org" "*scratch*" "mytodos.org" ".bash_aliases" "*Messages*" "*eww*" "mytodos.org" "*Backtrace*" "*eww*" "*scratch*" "mytodos.org" "init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" "mytodos.org" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "mytodos.org" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "mytodos.org" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" ".emacs.d/init.el" "11.22.63.Season.1.720p.BluRay.x264.ShAaNiG" "*scratch*" ".bash_aliases" "mytodos.org" "emacs.service" "mytodos.org" "*ansi-term*" "*scratch*" "mytodos.org" "*ansi-term*" "org.el" "xah-fly-keys.tute.org" "mytodos.org" "*shell*" "xah-fly-keys.tute.org" "*Help*" "*scratch*" "*eww*" "*scratch*" "init.el" "*scratch*"))
(setq regexp-history '("server" "nov" "dired" "all-the-icons" "embark" "org-modern" "restart"))
(setq minibuffer-history '("server-start" "server-running-p" "server-mode" "/bin/bash" "server-mode" "/bin/bash" ";;" "mode-line" "set-face-background" "practicals-emacs" "toc-mastering" "/bin/bash" "centertext" "/bin/bash" "nov" "origin" "/bin/bash" "dracula-theme" "cobalt" "gnome" "tango" "/bin/bash" "bedrock-init" "desktop-auto-save" "desktop-save-mode" "enable-recursive-minibuffers" "*eww*" "set-frame-font" "electric-pair-mode" "load-theme" "charcoal-black" "debug-on-entry"))
(setq file-name-history '("~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "~/txt-notes/installed.apps.ubuntu.txt" "~/.emacs.d/" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/init.el" "~/.emacs.d/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/" "~/.emacs.d/lisp/centaur-tabs.el" "~/.emacs.d/notes/lima.kami.magburugto.org" "~/.emacs.d/notes/lyrics.waraywaray.org" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/notes/xah-fly-keys.org" "~/.emacs.d/init.el" "~/temp/xah-fly-keys-ubuntu-nuc.el" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/notes/lyrics.waraywaray.org" "~/Downloads/waray.waray.mix.org" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/.emacs.desktop" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/" "https://github.com/emacs-straigh/embark-consult" "http://xahlee.info/emacs/misc/xah-fly-keys_mode_status.html" "https://github.com/emacs-straigh/embark-consult" "~/.emacs.d/todos/mytodos.org" "~/.config/kitty/kitty.conf" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.bash_profile" "~/.bash_aliases" "~/.bashrc" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/notes/xah-reference-guide.org" "~/.emacs.d/lisp/xah-fly-keys-customize.el" "~/.emacs.d/todos/mytodos.org" "~/Documents/pubs/Learning_GNU_Emacs,_3rd_Edition_(Debra_Cameron,_James_Elliott,_Marc_Loy_etc.)_(Z-Library)-1.epub" "~/Documents/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/Documents/" "~/.emacs.d/.git/COMMIT_EDITMSG" "~/.emacs.d/.gitignore" "~/.emacs.d/notes/eshell.intro.org" "~/.bash_aliases" "~/.gitignore_global" "/media/eriberttom/e5f62be8-da80-4c69-8e54-cceb195ca307/eriberttom/Downloads/11.22.63.Season.1.720p.BluRay.x264.ShAaNiG/" "~/.bashrc" "~/.bash_aliases" "~/.gitignore_global" "~/.config/systemd/user/emacs.service" "~/.emacs.d/todos/mytodos.org" "~/.emacs.d/init.el" "~/.emacs.d/extras/org.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/init.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/init.el" "~/.emacs.d/" "~/.emacs.d/notes/xah-fly-keys.tute.org" "~/.emacs.d/notes/xah-keybindings.cheatsheet.org" "~/Github-repos/better-defaults/better-defaults.el" "~/.emacs.d/init.el" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/.emacs.d/notes/xah-fly-keys.tute.org" "~/.emacs.d/init.el" "~/Github-repos/better-defaults/better-defaults.el" "~/.emacs.d/init.el" "~/Github-repos/better-defaults/README.md" "~/bak.emacs.dirs/bedrock.emacs.d/init.el" "~/Github-repos/better-defaults/README.md"))
(setq extended-command-history '("magit-status" "eww" "switch-to-buffer-other-tab" "insert-buffer" "switch-to-buffer-other-tab" "eval-region" "xah-new-empty-buffer" "package-list-packages" "fit-frame-to-buffer" "switch-to-buffer-other-tab" "desktop-save" "find-file-other-tab" "switch-to-buffer-other-tab" "kill-emacs" "eval-buffer" "vertico-buffer-mode" "tab-close" "kill-buffer" "ansi-term" "switch-to-buffer-other-tab" "org-todo" "switch-to-buffer-other-tab" "magit-status" "eval-buffer" "tab-close" "shell-script-mode" "find-file-other-tab" "switch-to-buffer-other-tab" "server-start" "find-file-other-tab" "xah-insert-date" "find-file-other-tab" "kill-emacs" "restart-emacs" "find-file-other-tab" "switch-to-buffer-other-tab" "tab-next" "org-roam-node-find" "org-todo" "repeat-complex-command" "org-todo" "indent-region" "org-todo" "string-insert-rectangle" "rectangle-mark-mode" "org-todo" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "rectangle-mark-mode" "string-insert-rectangle" "org-roam-capture" "ibuffer" "tab-previous" "man" "switch-to-buffer-other-tab" "find-file-other-tab" "ibuffer" "tab-next" "shell-script-mode" "ibuffer" "tab-previous" "tab-next" "tab-previous" "eww" "tab-previous" "tab-close" "tab-next" "org-roam-capture" "org-todo" "tab-previous" "tab-close" "tab-previous" "tab-next" "ibuffer" "tab-next" "magit-status" "transpose-lines" "tab-previous" "switch-to-buffer" "save-buffer" "xah-new-empty-buffer" "tab-previous" "find-file-other-tab" "ansi-term" "find-file-other-tab" "org-todo" "tab-next" "tab-previous" "tab-next" "tab-previous" "tab-next" "tab-previous" "xah-new-empty-buffer" "switch-to-buffer-other-tab" "tab-previous" "upcase-word" "capitalize-word"))
