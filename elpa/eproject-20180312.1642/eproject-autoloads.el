;;; eproject-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from eproject.el

(register-definition-prefixes "eproject" '("define-" "dot-eproject-mode" "eproject-" "generic"))


;;; Generated autoloads from eproject-android.el

(register-definition-prefixes "eproject-android" '("android"))


;;; Generated autoloads from eproject-anything.el

(defvar anything-c-source-eproject-files '((name . "Files in eProject") (init lambda nil (if (buffer-file-name) (setq anything-eproject-root-dir (eproject-maybe-turn-on)) (setq anything-eproject-root-dir 'nil))) (candidates lambda nil (if anything-eproject-root-dir (eproject-list-project-files anything-eproject-root-dir))) (type . file)) "\
Search for files in the current eProject.")
(defvar anything-c-source-eproject-buffers '((name . "Buffers in this eProject") (init lambda nil (if (buffer-file-name) (setq anything-eproject-root-dir (eproject-maybe-turn-on)) (setq anything-eproject-root-dir 'nil))) (candidates lambda nil (if anything-eproject-root-dir (mapcar 'buffer-name (cdr (assoc anything-eproject-root-dir (eproject--project-buffers)))))) (volatile) (type . buffer)) "\
Search for buffers in this project.")
(autoload 'anything-eproject-files "eproject-anything" "\
Preconfigured `anything' for searching files inside current eproject." t)
(autoload 'anything-eproject-buffers "eproject-anything" "\
Preconfigured `anything' for opening buffers. Searches for
buffers in the current project, then other buffers, also gives
option of recentf. Replaces switch-to-buffer." t)


;;; Generated autoloads from eproject-arduino.el

(register-definition-prefixes "eproject-arduino" '("arduino"))


;;; Generated autoloads from eproject-clojure-leiningen.el

(register-definition-prefixes "eproject-clojure-leiningen" '("clojure-leiningen"))


;;; Generated autoloads from eproject-compile.el

(autoload 'eproject-compile "eproject-compile" "\
Run `compile' in the project root.

This uses a computed history based on project attributes, the
existing `compile-history', and `compile-command' which may have
been locally set by a mode.

To provide defaults for a project or project type, set the
`:common-compiles' attribute to a list of strings representing
the command to invoke." t)
(register-definition-prefixes "eproject-compile" '("eproject-"))


;;; Generated autoloads from eproject-extras.el

(autoload 'eproject-find-file "eproject-extras" "\
Present the user with a list of files in the current project.
to select from, open file when selected." t)
(autoload 'eproject--project-buffers "eproject-extras" "\
Return an alist mapping each project root to its open buffers.

Does not list the project if it doesn't have any buffers.")
(autoload 'eproject-switch-to-buffer "eproject-extras" "\
Interactively switch to a buffer belonging to the same project.

With prefix argument 4, first ask which project.

(fn &optional PREFIX)" t)
(autoload 'eproject-switch-to-buffer-other-window "eproject-extras" "\
Interactively switch the other window to a buffer belonging to the same project.

With prefix argument 4, first ask which project.

(fn &optional PREFIX)" t)
(autoload 'eproject-switch-to-buffer-other-frame "eproject-extras" "\
Interactively switch the other frame to a buffer belonging to the same project.

With prefix argument 4, first ask which project.

(fn &optional PREFIX)" t)
(autoload 'eproject-ibuffer "eproject-extras" "\
Open an IBuffer window showing all buffers in the current project, or named project if PREFIX arg is supplied.

(fn PREFIX)" t)
(autoload 'eproject-kill-project-buffers "eproject-extras" "\
Kill every buffer in the current project, including the current buffer.

If PREFIX is specified, prompt for a project name and kill those
buffers instead.

(fn PREFIX)" t)
(autoload 'eproject-revisit-project "eproject-extras" "\
Given a project name, visit the root directory.

If PREFIX arg is supplied, run `eproject-find-file'.

(fn PREFIX)" t)
(autoload 'eproject-grep "eproject-extras" "\
Search all files in the current project for REGEXP.

(fn REGEXP)" t)
(autoload 'eproject-todo "eproject-extras" "\
Display a project TODO list.

Customize `eproject-todo-expressions' to control what this function looks for." t)
(autoload 'eproject-multi-isearch-buffers "eproject-extras" "\
Do a `multi-isearch' on opened buffers in the current project.

Run `eproject-open-all-project-files' first or just
`eproject-grep' if you want to search all project files." t)
(autoload 'eproject-eshell-cd-here "eproject-extras" "\
If there is an EShell buffer, cd to the project root in that buffer.

With the prefix arg LOOK-IN-INVISIBLE-BUFFERS looks in buffers that are not currently displayed.

(fn &optional LOOK-IN-INVISIBLE-BUFFERS)" t)
(autoload 'eproject-current-working-directory "eproject-extras" "\
Return the project root directory for most recently visited
buffer.  Fallback to the directory of the buffer when it is
not in a project.")
(register-definition-prefixes "eproject-extras" '("eproject" "with-each-buffer-in-project"))


;;; Generated autoloads from eproject-javascript-bower.el

(register-definition-prefixes "eproject-javascript-bower" '("javascript-bower"))


;;; Generated autoloads from eproject-javascript-grunt.el

(register-definition-prefixes "eproject-javascript-grunt" '("javascript-grunt"))


;;; Generated autoloads from eproject-javascript-npm.el

(register-definition-prefixes "eproject-javascript-npm" '("javascript-npm"))


;;; Generated autoloads from eproject-perl.el

(register-definition-prefixes "eproject-perl" '("cperl-" "perl"))


;;; Generated autoloads from eproject-php-composer.el

(register-definition-prefixes "eproject-php-composer" '("php-composer"))


;;; Generated autoloads from eproject-python.el

(register-definition-prefixes "eproject-python" '("eproject-python-" "python"))


;;; Generated autoloads from eproject-ruby.el

(register-definition-prefixes "eproject-ruby" '("ruby"))


;;; Generated autoloads from eproject-ruby-on-rails.el

(register-definition-prefixes "eproject-ruby-on-rails" '("ruby-on-rails"))


;;; Generated autoloads from eproject-tags.el

(register-definition-prefixes "eproject-tags" '("eproject-tags"))


;;; Generated autoloads from eproject-tasks.el

(register-definition-prefixes "eproject-tasks" '("anything-eproject-tasks" "eproject-tasks-" "helm-eproject-tasks"))


;;; Generated autoloads from helm-eproject.el

(register-definition-prefixes "helm-eproject" '("eproject-helm-configure" "helm-eproject"))

;;; End of scraped data

(provide 'eproject-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; eproject-autoloads.el ends here
